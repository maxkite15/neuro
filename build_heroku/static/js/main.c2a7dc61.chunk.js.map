{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["ChartBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","chartEl","state","chartOpt","legend","display","scales","xAxes","stacked","offset","ticks","beginAtZero","yAxes","maintainAspectRatio","chartRef","React","createRef","updateChartData","bind","assertThisInitialized","myChartRef","current","getContext","Chart","type","data","labels","datasets","label","backgroundColor","concat","color","join","borderColor","borderWidth","hoverBorderWidth","options","content","forEach","item","push","chartData","showLegend","labelString","xLabel","fontColor","yLabel","react_default","a","createElement","Fragment","es","PureComponent","socket","App","startTimeHour","endTimeHour","prevDaysCount","isPerfomanceStacked","tokenVal","console","log","clientId","redirectUri","stateVal","chartsData","prevDaysChartsData","startDate","Date","selectedType","getLabel","formatData","initData","getChartData","getDataByTimeout","updateData","getPreviousDayData","lastHour","lastMinutes","background","stress","cognitiveLoad","lucidity","performance","in_range","hour","minute","date","getDateKey","getFullYear","getMonth","getDate","getTimeKey","_this2","self","socketIOClient","apply","on","result","token","expires_in","setTimeout","link","document","getElementById","href","auth_url","click","app_config","dayStartHour","dayEndHour","perfomanceStacked","currDateTime","currHour","getHours","currMinute","getMinutes","timeCond","getDateTimeStr","startData","then","err","currDate","currData","stateKey","_this3","Promise","resolve","reject","all","stressData","cognitiveLoadData","lucidityData","setState","defineProperty","NotificationManager","error","message","setDate","key","newData","afterInit","_this4","timeout","currMinutes","onTimeout","increaseTimeKey","newChartsData","url","fetch","response","status","Error","statusText","json","res","catch","minutes","endHour","year","month","day","seconds","getSeconds","values","randomVal","Math","floor","random","length","td","isPrevDay","_this5","iObj","JSON","parse","recDate","t","recHour","recMinutes","i","s","v","val","count","_this6","_this$state","courageData","chartsLabels","stressChartData","cognitiveLoadChartData","lucidityChartData","performanceChartData","inRangeChartData","round","className","id","target","style","name","value","checked","onChange","e","htmlFor","Chart_ChartBar","react_notifications_lib","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","App_App","URL","process","origin","addEventListener","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c2a7dc61.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\r\nimport {Bar} from 'react-chartjs-2';\r\nimport Chart from \"chart.js\";\r\n//import * as zoom from 'chartjs-plugin-zoom'\r\n\r\nexport default class ChartBar extends PureComponent{\r\n    chartEl = null;\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            chartOpt: {\r\n                legend: {\r\n                    display: false\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        stacked: true,\r\n                        offset: true,\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        stacked: true,\r\n                        ticks: {\r\n                            beginAtZero: true\r\n                        }\r\n                    }]\r\n                },\r\n                maintainAspectRatio: false,\r\n                /*pan: {\r\n                    enabled: false,\r\n                    mode: 'x',\r\n                    onPan: function({chart}) { console.log(`I was panned!!!`); }\r\n                },\r\n                zoom: {\r\n                    enabled: true,\r\n                    drag: false,\r\n                    mode: 'x',\r\n                    onZoom: function({chart}) { console.log(`I was zoomed!!!`); }\r\n                }*/\r\n            }\r\n        };\r\n\r\n        this.chartRef = React.createRef();\r\n\r\n        this.updateChartData = this.updateChartData.bind(this);\r\n    }\r\n\r\n    updateChartData(){\r\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n\r\n        this.chartEl = new Chart(myChartRef, {\r\n            type: \"bar\",\r\n            data: {\r\n                labels: this.props.labels,\r\n                datasets: [{\r\n                    label: this.props.label,\r\n                    data: this.props.data,\r\n                    backgroundColor: `rgba(${this.props.color.join(',')}, 0.6)`,\r\n                    borderColor: `rgba(${this.props.color.join(',')}, 1)`,\r\n                    borderWidth: 2,\r\n                    hoverBorderWidth: 0\r\n                }],\r\n            },\r\n            options: this.state.chartOpt\r\n        });\r\n    }\r\n\r\n    /*componentDidMount() {\r\n        this.updateChartData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        this.updateChartData();\r\n    }*/\r\n\r\n    render(){\r\n        let {chartOpt} = this.state;\r\n        let datasets = [];\r\n        this.props.content.forEach(item=>{\r\n            datasets.push({\r\n                label: item.label,\r\n                data: item.data,\r\n                backgroundColor: `rgba(${item.color.join(',')}, 0.6)`,\r\n                borderColor: `rgba(${item.color.join(',')}, 1)`,\r\n                borderWidth: 2,\r\n                hoverBorderWidth: 0\r\n            });\r\n        });\r\n        const chartData = {\r\n            labels: this.props.labels,\r\n            datasets: datasets,\r\n        };\r\n        if(this.props.showLegend){\r\n            chartOpt.legend.display=true;\r\n        }\r\n        chartOpt.scales.xAxes[0]['scaleLabel'] = {\r\n            display: true,\r\n            labelString: this.props.xLabel,\r\n            fontColor: \"black\",\r\n        };\r\n        chartOpt.scales.yAxes[0]['scaleLabel'] = {\r\n            display: true,\r\n            labelString: this.props.yLabel,\r\n            fontColor: \"black\",\r\n        };\r\n        return (\r\n            <React.Fragment>\r\n                <Bar\r\n                    data={chartData}\r\n                    options={chartOpt}\r\n                />\r\n            {/*<canvas\r\n                id={this.props.id}\r\n                ref={this.chartRef}\r\n            />*/}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport socketIOClient from 'socket.io-client';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n/*import './css/App.css';\nimport './css/bootstrap.min.css';*/\nimport ChartBar from './components/Chart';\nimport {Bar} from \"react-chartjs-2\";\nimport stress from './testData/Stress.json';\nimport load from './testData/CognitiveLoad.json';\nimport lucidity from './testData/Lucidity.json';\n\nlet socket = null;\n\nexport default class App extends Component {\n    constructor(props){\n        super(props);\n\n        this.startTimeHour = null;\n        this.endTimeHour = null;\n        this.prevDaysCount = null;\n        this.isPerfomanceStacked = null;\n        this.tokenVal = null;\n\n        console.log('Access token: ', this.tokenVal);\n\n        this.state = {\n            clientId: '',\n            redirectUri: '',\n            stateVal: '',\n            labels: [],\n            chartsData: {},\n            prevDaysChartsData: {},\n            startDate: new Date(),\n            selectedType: 'currDay'\n        };\n\n        this.getLabel = this.getLabel.bind(this);\n        this.formatData = this.formatData.bind(this);\n        this.initData = this.initData.bind(this);\n        this.getChartData = this.getChartData.bind(this);\n        this.getDataByTimeout = this.getDataByTimeout.bind(this);\n        this.updateData = this.updateData.bind(this);\n        this.getPreviousDayData = this.getPreviousDayData.bind(this);\n        this.lastHour = -1;\n        this.lastMinutes = -1;\n        this.background = {\n            stress: [255, 7, 7],\n            cognitiveLoad: [140,140,140],\n            lucidity: [0, 204, 255],\n            performance: [1, 187, 0],\n            in_range: [71, 0, 212]\n        };\n    }\n\n    getDateTimeStr(hour, minute, date){\n        if(!date){\n            date = new Date();\n        }\n        return this.getDateKey(date.getFullYear(), date.getMonth(), date.getDate())+'T'+this.getTimeKey(hour, minute)+':00';\n    }\n\n    componentDidMount() {\n        console.log('DID MOUNT');\n        let self = this;        \n\n        socket = socketIOClient.apply(this, ['http://pacific-everglades-70974.herokuapp.com']);\n        socket.on('NewToken', result=>{\n            console.log('NEW TOKEN DATA: ', result);\n            this.tokenVal = result.token;\n            let expires_in = result.expires_in*1000;\n            setTimeout(()=>{\n                let link = document.getElementById('updateTokenLink');\n                link.href = result.auth_url;\n                link.click();\n            }, expires_in);\n        });\n\t\tsocket.on('appConfig', result=>{\n\t\t\tlet app_config = result;\n\t\t\tself.startTimeHour = app_config && (app_config.dayStartHour || app_config.dayStartHour===0) ? app_config.dayStartHour : 9;\n\t\t\tself.endTimeHour = app_config && (app_config.dayEndHour || app_config.dayEndHour===0) ? app_config.dayEndHour : 18;\n\t\t\tself.prevDaysCount = app_config && app_config.prevDaysCount ? app_config.prevDaysCount : 0;\n\t\t\tself.isPerfomanceStacked = app_config && app_config.perfomanceStacked ? true : false;\n\t\t\tlet currDateTime = new Date();\n\t\t\tlet currHour = currDateTime.getHours();\n\t\t\tlet currMinute = currDateTime.getMinutes();\n\t\t\tlet timeCond = `Start=${self.getDateTimeStr(self.startTimeHour, 0)}&Stop=${self.getDateTimeStr(currHour, currMinute)}`;\n\t\t\tlet startData = self.initData(currHour, currMinute);\n\t\t\tself.updateData(startData, timeCond, 'chartsData')\n\t\t\t\t.then(result=>{\n\t\t\t\t\tconsole.log(result);\n\t\t\t\t\tself.getDataByTimeout(true);\n\t\t\t\t}, err=>{\n\t\t\t\t\tconsole.log('DID MOUNT ERROR: ', err);\n\t\t\t\t});\n\t\t\tif(self.prevDaysCount){\n\t\t\t\tlet currDate = new Date();\n\t\t\t\twhile(self.prevDaysCount>0){\n\t\t\t\t\tself.getPreviousDayData(currDate);\n\t\t\t\t\tself.prevDaysCount--;\n\t\t\t\t}\n\t\t\t}\n        });\n    }\n\n    updateData(currData, timeCond, stateKey){\n        let self = this;\n        return new Promise((resolve, reject)=>{\n            Promise.all([\n                this.getChartData(`/chart_data?${timeCond}&Group=feedback&Class=trigger-negative&Kind=Stress_Flag`),\n                this.getChartData(`/chart_data?${timeCond}&Group=feedback&Class=trigger-negative&Kind=CognitiveLoad_Flag`),\n                this.getChartData(`/chart_data?${timeCond}&Group=bio&Class=mental&Kind=Lucidity_Avg`)\n            ]).then(result=>{\n                console.log('RESULT: ', result);\n                let stressData = result[0].data;\n                let cognitiveLoadData = result[1].data;\n                let lucidityData = result[2].data;\n                self.formatData(stressData, currData, 'stress', stateKey==='prevDaysChartsData');\n                self.formatData(cognitiveLoadData, currData, 'cognitiveLoad', stateKey==='prevDaysChartsData');\n                self.formatData(lucidityData, currData, 'lucidity', stateKey==='prevDaysChartsData');\n                self.setState({\n                    [stateKey]: currData\n                });\n                resolve('Data updated');\n            }, err=>{\n                NotificationManager.error(err.message, 'Error', 5000);\n                reject(err);\n            });\n        });\n    }\n\n    getPreviousDayData(currDate){\n        currDate.setDate(currDate.getDate()-1);\n        let key = this.getDateKey(currDate.getFullYear(), currDate.getMonth(), currDate.getDate());\n        console.log('KEY=', key);\n        let newData = this.state.prevDaysChartsData;\n        newData[key] = {};\n        let timeCond = `Start=${this.getDateTimeStr(this.startTimeHour, 0, currDate)}&Stop=${this.getDateTimeStr(this.endTimeHour, 0, currDate)}`;\n        console.log(timeCond);\n        this.updateData(newData, timeCond, 'prevDaysChartsData')\n            .then(result=>{\n                console.log('Success prev day data update: ', result);\n            }, err=>{\n                console.log('Prev day data update ERROR: ', err);\n            });\n    }\n\n    increaseTimeKey(){\n        if(this.lastMinutes<40){\n            this.lastMinutes+=20;\n        }else{\n            this.lastHour++;\n            this.lastMinutes=this.lastMinutes+20-60;\n        }\n    }\n\n    getDataByTimeout(afterInit){\n        let timeout = 20*60*1000;\n        let self = this;\n        if(afterInit){\n            let currDateTime = new Date();\n            let currHour = currDateTime.getHours();\n            let currMinutes = currDateTime.getMinutes();\n            timeout = (currHour < this.lastHour && this.lastMinutes===0 ? 60 - currMinutes : (currHour === this.lastHour && this.lastMinutes>currMinutes ? this.lastMinutes - currMinutes: 20))*60*1000;\n        }\n        setTimeout(()=>{\n            let newChartsData = self.state.chartsData;\n            let key = this.getTimeKey(self.lastHour, self.lastMinutes);\n            newChartsData[key] = {};\n            let timeCond = `Start=\n            ${self.getDateTimeStr(self.lastMinutes===0 ? self.lastHour-1 : self.lastHour, self.lastMinutes===0 ? 40 : self.lastMinutes - 20)}\n            &Stop=\n            ${self.getDateTimeStr(self.lastHour, self.lastMinutes)}`;\n            self.updateData(newChartsData, timeCond, 'chartsData')\n                .then(result=>{\n                    console.log(result);\n                    onTimeout();\n                }, err=>{\n                    console.log(err);\n                    onTimeout();\n                });\n        }, timeout);\n\n        function onTimeout() {\n            self.increaseTimeKey();\n            if(self.lastHour < self.endTimeHour || self.lastHour === self.endTimeHour && self.lastMinutes===0) {\n                self.getDataByTimeout(false);\n            }else{\n                setTimeout(()=>{\n                    self.getPreviousDayData(new Date());\n                    self.getDataByTimeout(false);\n                },(24-self.endTimeHour+self.startTimeHour)*60*60*1000);\n            }\n        }\n    }\n\n    getChartData(url){\n        return new Promise((resolve, reject)=>{\n            fetch(url)\n                .then(response=>{\n                    if(response.status!==200) throw new Error(response.statusText);\n                    console.log(response);\n                    return response.json()\n                })\n                .then(res=>{\n                    resolve(res);\n                })\n                .catch(err=>{\n                    reject(err);\n                })\n        });\n    }\n\n    initData(currHour, currMinutes){\n        let res = {};\n        let hour = this.startTimeHour;\n        let minutes = 20;\n        let endHour = this.endTimeHour;\n        while((hour < currHour || (hour === currHour&& minutes < currMinutes)) && hour < endHour) {\n            let key = this.getTimeKey(hour, minutes);\n            res[key] = {};\n            if(minutes+20 >= 60){\n                hour++;\n                minutes=0;\n            }else{\n                minutes+=20;\n            }\n        }\n        this.lastHour = hour;\n        this.lastMinutes = minutes;\n        return res;\n    }\n\n    getTimeKey(hour, minute){\n        return (hour<10 ? '0'+hour : hour) + ':' + (minute<10 ? '0'+minute : minute);\n    }\n\n    getDateKey(year, month, day){\n        return year+'-'+(month+1<10 ? '0'+(month+1) : month+1)+'-'+(day<10 ? '0'+day : day);\n    }\n\n    getLabel(){\n        let currDate = new Date();\n        let minutes = currDate.getMinutes();\n        let seconds = currDate.getSeconds();\n        return (minutes<10 ? '0'+minutes : minutes) + ':' + (seconds<10 ? '0'+seconds : seconds);\n    }\n\n    fakeData(){\n        let values = [0,1,-2];\n        let randomVal = values[Math.floor(Math.random() * values.length)];\n        let currDate = new Date();\n        let td = this.getDateKey(currDate.getFullYear(), currDate.getMonth(), currDate.getDate())+'T'+this.getTimeKey(currDate.getHours(), currDate.getMinutes());\n        return [{\n            \"data\": `{\\\"s\\\": [{\\\"c\\\": 0, \\\"d\\\": -0.5413542847002053, \\\"t\\\": 2002.2506371, \\\"v\\\": ${randomVal}}], \\\"t\\\": \\\"${td}\\\"}`\n        }]\n    }\n\n    formatData(data, chartsData, type, isPrevDay){\n        data.forEach(item=>{\n            let iObj = JSON.parse(item.data);\n            let recDate = new Date(iObj.t);\n            let recHour = recDate.getMinutes()<40 ? recDate.getHours() : recDate.getHours()+1;\n            let recMinutes = recDate.getMinutes()<20 ? 20 : (recDate.getMinutes()<40 ? 40 : 0);\n            let key = this.getTimeKey(recHour, recMinutes);\n            if(isPrevDay){\n                key = this.getDateKey(recDate.getFullYear(), recDate.getMonth(), recDate.getDate());\n            }\n            for(let i=0; i<iObj.s.length; i++){\n                if(iObj.s[i].v !== -2){\n                    if(chartsData[key]) {\n                        if (!chartsData[key][type]) chartsData[key][type] = {val: 0, count: 0};\n                        chartsData[key][type].val += iObj.s[i].v;\n                        chartsData[key][type].count++;\n                    }\n                }\n                //работоспособность\n                if(iObj.s[i].v === 0 || iObj.s[i].v === -2){\n                    if(chartsData[key]) {\n                        if (!chartsData[key]['performance']) chartsData[key]['performance'] = {count: 0};\n                        chartsData[key]['performance'].count++;\n                    }\n                }else if(iObj.s[i].v === 1){\n                    //for stacked chart\n                    if(chartsData[key]) {\n                        if (!chartsData[key]['in_range']) chartsData[key]['in_range'] = {count: 0};\n                        chartsData[key]['in_range'].count++;\n                    }\n                }\n            }\n        });\n    }\n\n\n\n    render(){\n        const {clientId, redirectUri, stateVal, tokenVal, labels, stressData, lucidityData, cognitiveLoadData, courageData, chartsData, prevDaysChartsData, selectedType} = this.state;\n        let chartsLabels = [];\n        let stressChartData = [];\n        let cognitiveLoadChartData = [];\n        let lucidityChartData = [];\n        let performanceChartData = [];\n        //for stacked chart\n        let inRangeChartData = [];\n        if(selectedType === 'currDay') {\n            //curr day data format\n            for (let key in chartsData) {\n                chartsLabels.push(key);\n                if (chartsData[key].stress) {\n                    stressChartData.push(Math.round(chartsData[key].stress.val / chartsData[key].stress.count));\n                } else {\n                    stressChartData.push(0);\n                }\n                if (chartsData[key].cognitiveLoad) {\n                    cognitiveLoadChartData.push(Math.round(chartsData[key].cognitiveLoad.val / chartsData[key].cognitiveLoad.count));\n                } else {\n                    cognitiveLoadChartData.push(0);\n                }\n                if (chartsData[key].lucidity) {\n                    lucidityChartData.push(Math.round(chartsData[key].lucidity.val / chartsData[key].lucidity.count));\n                } else {\n                    lucidityChartData.push(0);\n                }\n                if (chartsData[key].performance) {\n                    performanceChartData.push(chartsData[key].performance.count);\n                } else {\n                    performanceChartData.push(0);\n                }\n                if (chartsData[key].in_range) {\n                    inRangeChartData.push(chartsData[key].in_range.count);\n                } else {\n                    inRangeChartData.push(0);\n                }\n\n            }\n        }else {\n            //prev days data format\n            for (let key in prevDaysChartsData) {\n                chartsLabels.push(key);\n                if (prevDaysChartsData[key] && prevDaysChartsData[key].stress) {\n                    stressChartData.push(Math.round(prevDaysChartsData[key].stress.val / prevDaysChartsData[key].stress.count));\n                } else {\n                    stressChartData.push(0);\n                }\n                if (prevDaysChartsData[key] && prevDaysChartsData[key].cognitiveLoad) {\n                    cognitiveLoadChartData.push(Math.round(prevDaysChartsData[key].cognitiveLoad.val / prevDaysChartsData[key].cognitiveLoad.count));\n                } else {\n                    cognitiveLoadChartData.push(0);\n                }\n                if (prevDaysChartsData[key] && prevDaysChartsData[key].lucidity) {\n                    lucidityChartData.push(Math.round(prevDaysChartsData[key].lucidity.val / prevDaysChartsData[key].lucidity.count));\n                } else {\n                    lucidityChartData.push(0);\n                }\n                if (prevDaysChartsData[key] && prevDaysChartsData[key].performance) {\n                    performanceChartData.push(prevDaysChartsData[key].performance.count);\n                } else {\n                    performanceChartData.push(0);\n                }\n                if (prevDaysChartsData[key] && prevDaysChartsData[key].in_range) {\n                    inRangeChartData.push(prevDaysChartsData[key].in_range.count);\n                } else {\n                    inRangeChartData.push(0);\n                }\n            }\n        }\n        const xLabel = selectedType === 'currDay' ? 'Время, мин' : 'Дата, дни';\n        const yLabel = 'Коллективный уровень';\n\n        return (\n            <div className=\"App\">\n                <a id=\"updateTokenLink\" target=\"_self\" style={{display: 'none'}}>Token</a>\n                <div className=\"form-check form-check-inline\">\n                    <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\"\n                           value=\"currDay\" checked={selectedType==='currDay'} onChange={(e)=>this.setState({selectedType: 'currDay'})}/>\n                    <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Текущий день</label>\n                </div>\n                <div className=\"form-check form-check-inline\">\n                    <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\"\n                           value=\"prevDays\" checked={selectedType==='prevDays'} onChange={(e)=>this.setState({selectedType: 'prevDays'})}/>\n                    <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Прошлые дни</label>\n                </div>\n                <div className=\"Charts\">\n                    <div className=\"chart-block\" >\n                        <div className=\"chart-head\">\n                            <span className=\"label\" style={{color: `rgba(${this.background.lucidity.join(',')}, 1)`}}>Сосредоточенность</span>\n                        </div>\n                        <div className=\"chart-body\">\n                            <ChartBar id=\"lucidityBar\"\n                                  content={[{\n                                      data: lucidityChartData,\n                                      label: 'Сосредоточенность',\n                                      color: this.background.lucidity\n                                  }]}\n                                  labels={chartsLabels}\n                                  xLabel={xLabel} yLabel={yLabel}/>\n                        </div>\n                    </div>\n\n                    <div className=\"chart-block\">\n                        <div className=\"chart-head\">\n                            <span className=\"label\" style={{color: `rgba(${this.background.stress.join(',')}, 1)`}}>Стресс</span>\n                        </div>\n                        <div className=\"chart-body\">\n                            <ChartBar id=\"stressBar\"\n                                  content={[{\n                                      data: stressChartData,\n                                      label: 'Стресс',\n                                      color: this.background.stress\n                                  }]}\n                                  labels={chartsLabels}\n                                  xLabel={xLabel} yLabel={yLabel}/>\n                        </div>\n                    </div>\n\n\n                    <div className=\"chart-block\">\n                        <div className=\"chart-head\">\n                            <span className=\"label\" style={{color: `rgba(${this.background.cognitiveLoad.join(',')}, 1)`}}>Когнитивная нагрузка</span>\n                        </div>\n                        <div className=\"chart-body\">\n                            <ChartBar id=\"cognitiveLoadBar\"\n                                  content={[{\n                                      data: cognitiveLoadChartData,\n                                      label: 'Когнитивная нагрузка',\n                                      color: this.background.cognitiveLoad\n                                  }]}\n                                  labels={chartsLabels}\n                                  xLabel={xLabel} yLabel={yLabel}/>\n                        </div>\n                    </div>\n\n                    <div className=\"chart-block\">\n                        <div className=\"chart-head\">\n                            <span className=\"label\" style={{color: `rgba(${this.background.performance.join(',')}, 1)`}}>Работоспособность</span>\n                        </div>\n                        <div className=\"chart-body\">\n                            <ChartBar id=\"courageBar\"\n                                content={this.isPerfomanceStacked ? [{\n                                        data: performanceChartData,\n                                        label: 'Вне диапазона/Нет сигнала',\n                                        color: this.background.performance\n                                    },{\n                                        data: inRangeChartData,\n                                        label: 'В диапозоне',\n                                        color: this.background.in_range\n                                    }]\n                                    :[{\n                                        data: performanceChartData,\n                                        label: 'Вне диапазона/Нет сигнала',\n                                        color: this.background.performance\n                                    }]\n                                }\n                                labels={chartsLabels}\n                                showLegend={this.isPerfomanceStacked}\n                                xLabel={xLabel} yLabel=\"Количество событий\"/>\n                        </div>\n                    </div>\n                </div>\n\n                <NotificationContainer/>\n            </div>\n        )\n    }\n}\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <Chart/>\n    </div>\n  );\n}\n\nexport default App;*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n/*import './css/index.css';\nimport './css/App.css';\nimport './css/bootstrap.min.css';*/\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}